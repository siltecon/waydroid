# VaultLink Yocto Project .gitignore
# Comprehensive gitignore for Yocto/OpenEmbedded builds
.claude*

# macOS system files
.DS_Store
.AppleDouble
.LSOverride

##############################################################################
# Yocto/BitBake Build Directories
##############################################################################

# Build directories (these contain all build artifacts)
build-*/
tmp/
tmp-*/
deploy/
work/
work-shared/
sysroots/
sysroots-*/
stamps/
stamps-*/
cache/
downloads/
sstate-cache/

# Build output directories
build-qemu-arm/
build-radxa-zero3/

##############################################################################
# Shared Cache Directories
##############################################################################

# Shared downloads and sstate cache
shared-cache/
DL_DIR/
SSTATE_DIR/

##############################################################################
# BitBake Files
##############################################################################

# BitBake lock files
bitbake.lock
pseudodone
pseudo/

# BitBake database
bitbake-cookerdaemon.log
cooker.log
bb_*.log

##############################################################################
# Configuration Files (Generated)
##############################################################################

# Auto-generated configuration files in build directories
build/
build-*/conf/auto.conf
build-*/conf/sanity_info
build-*/conf/bblayers.conf.orig
build-*/conf/local.conf.orig

# Build history
build-*/buildhistory/

##############################################################################
# Image and Package Files
##############################################################################

# Generated images
*.img
*.wic
*.wic.gz
*.tar.gz
*.tar.bz2
*.tar.xz
*.iso
*.hddimg
*.vmdk
*.qcow2
*.vdi

# Package files
*.rpm
*.deb
*.ipk

# Kernel and bootloader files
*.dtb
*.dtbo
uImage
zImage
bzImage
u-boot.bin
MLO

##############################################################################
# Development and Debug Files
##############################################################################

# Core dumps
core
core.*

# Debug symbols
*.debug

# Log files
*.log
*.log.*

# Temporary files
*.tmp
*.temp
*~
.#*
\#*#

##############################################################################
# Editor and IDE Files
##############################################################################

# Vim
*.swp
*.swo
*~
.vimrc.local

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# VS Code
.vscode/
*.code-workspace

# Sublime Text
*.sublime-project
*.sublime-workspace

# Atom
.atom/

# IntelliJ IDEA
.idea/
*.iml
*.ipr
*.iws

##############################################################################
# OS Generated Files
##############################################################################

# macOS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msm
*.msp

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

##############################################################################
# Archive and Backup Files
##############################################################################

# Compressed files
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Backup files
*.bak
*.backup
*.old
*.orig
*.save

##############################################################################
# Security and Credentials
##############################################################################

# SSH keys
*.pem
*.key
id_rsa
id_dsa
id_ecdsa
id_ed25519

# SSL certificates
*.crt
*.cert
*.p12
*.pfx

# Environment files with secrets
.env
.env.local
.env.production
.env.staging

##############################################################################
# Version Control
##############################################################################

# Git
.git/
# Don't ignore patch files in recipes - they're needed for Yocto builds
# *.patch
*.diff

# SVN
.svn/

# Mercurial
.hg/

##############################################################################
# Docker and Containers
##############################################################################

# Docker
Dockerfile.local
docker-compose.override.yml
.dockerignore

# Podman
.container-*

##############################################################################
# Python (if using Python scripts)
##############################################################################

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class
*.pyc

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/

# Streamlit
.streamlit/secrets.toml

##############################################################################
# Node.js (if using Node.js tools)
##############################################################################

# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

##############################################################################
# Project Specific
##############################################################################

# Local configuration overrides
local.conf.user
bblayers.conf.user

# Custom layers in development
meta-custom/
meta-local/
meta-proprietary/

# Documentation build artifacts
docs/_build/
docs-output/
docs/html/
docs/latex/

# SBOM build artifacts
sbom-output/

# Test results
test-results/
coverage/

# Performance profiling
perf.data*
gprof.out

##############################################################################
# Network and Remote Files
##############################################################################

# NFS
.nfs*

# SFTP
sftp-config.json

##############################################################################
# Miscellaneous
##############################################################################

# Local environment setup
.local/
.cache/

# Process IDs
*.pid

# Runtime data
*.sock

# Coverage reports
htmlcov/
.coverage
.coverage.*
coverage.xml

# Sphinx documentation
docs/_build/
docs-output/

# PyBuilder
target/

# IPython Notebook
.ipynb_checkpoints

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

##############################################################################
# Custom VaultLink Specific
##############################################################################

# VPN configuration files (if any)
*.ovpn
# Only ignore .conf files in specific directories, not recipe files
/vpn-configs/*.conf
/etc/*.conf
/tmp/*.conf

# Custom firmware images
firmware/
*.bin
*.hex

# Hardware-specific configurations
hw-configs/

# Deployment artifacts
deploy-*/
release-*/

# Local testing
test-images/
test-builds/

##############################################################################
# External Source Repositories
##############################################################################

# External meta layers are managed as Git submodules
# The source directories themselves are tracked via submodules, but build
# artifacts within them should be ignored

# Build artifacts in external layers
sources/*/tmp/
sources/*/build-*/
sources/*/sstate-cache/
sources/*/downloads/

# Keep meta-ciphergate layers tracked via submodules (managed in .gitmodules)
